* 操作系统的引导
** 实验内容
   1. 改写 bootsect.s 主要完成如下功能：
      + bootsect.s 能在屏幕上打印一段提示信息“XXX is booting...”，其中 XXX 是你给操作系统起的名字，例如 LZJos、Sunix 等。
   2. 改写 setup.s 主要完成如下功能：
      + bootsect.s 能完成 setup.s 的载入，并跳转到 setup.s 开始地址执行。而 setup.s 向屏幕输出一行“Now we are in SETUP”。
      + setup.s 能获取至少一个基本的硬件参数（如内存参数、显卡参数、硬盘参数等），将其放在内存的特定地址，并输出到屏幕上。
      + setup.s 不再加载Linux内核，保持上述信息显示在屏幕上即可。
** 实验过程
   1. 在 bootsect.s 中输出字符串
      #+begin_src asm
        mov	ah,#0x03  ! 获取光标位置
        xor	bh,bh
        int	0x10

        mov	cx,#27  ! 要输出的信息的长度（包括回车和换行符）
        mov	bx,#0x0007  ! page 0, attribute 7 (normal)
        mov	bp,#msg1  ! 这是要输出的信息
        mov	ax,#0x1301  ! write string, move cursor
        int	0x10
      #+end_src
      所以只需要更改一下 msg1 以及字符串的长度就可以了，注意字符串长度不能超过 32。
   2. 对 setup.s 的改动
      + 在 setup.s 执行前输出“Now we are in SETUP”。
        完成了第一个要求，那么第二个要求的第一部分就很简单了，我们看到了在 bootsect.s 中如何输出一个字符串，那么自然就可以在 setup.s 中输出字符串。首先按照 bootsect.s 中的 msg1 在 setup.s 中定义一个 msg0 是要输出的信息，然后就把上面的代码复制到 setup.s 的代码段最开始的地方。不过如果只做到这儿，输出的可能是乱码，也可能是看不见的字符，总之不是我们想要的信息。这是因为在输出的时候我们用到了扩展段寄存器~es~，而在 setup.s一开始的时候~es~存储的并不是这段代码的开始地址，所以需要给~es~赋值，而我们不能直接使用~mov~给段寄存器赋值所以使用下面代码
        #+BEGIN_SRC asm
          mov ax,#SETUPSEG  ! SETUPSEG是 setup.s 代码段开始的地址
          mov es,ax
        #+END_SRC
      + 在 setup.s 中获取一个基本硬件参数，并保存在特定地址，然后输出。
      + 不再加载内核
        系统的 Image 是由 build.c 来整理写入的，所以如果我们不想加载内核的化可以尝试不写入 system 内核，只把 bootsect 和 setup 写入。所以只需要修改 build.c 中的代码让它不执行最后的部分就行了，build 需要 system 作为第 4 个参数，所以如果没有第四个参数，那么它会报错，我们直接让它正确返回就可以了。
** 实验报告
问题：有时，继承传统意味着别手蹩脚。x86计算机为了向下兼容，导致启动过程比较复杂。请找出x86计算机启动过程中，被硬件强制，软件必须遵守的两个“多此一举”的步骤（多找几个也无妨），说说它们为什么多此一举，并设计更简洁的替代方案。
